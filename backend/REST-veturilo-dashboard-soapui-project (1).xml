<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8a6d75ad-0ecd-4e5f-ad9a-da31b4466236" activeEnvironment="Default" name="REST Project 1" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="80795e36-fbcb-4c19-a90d-c4f9337ea200" port="8089" path="/" host="DESKTOP-UR9BQIU" name="REST veturilo dashboard" docroot=""><con:settings/><con:properties/><con:restMockAction name="/station/selected/" method="GET" resourcePath="/station/selected/" id="3a0fee36-240f-4530-b3b8-79876c7724cb"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7352326c-166a-4ce3-b58b-0a92bce05a05" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"id":9653,"name":"Jagiellońska - Plac Hallera","freeBikes":21},{"id":9482,"name":"al. Jana Pawła II - Plac Mirowski","freeBikes":15},{"id":6445,"name":"PRAGA306","freeBikes":20},{"id":9678,"name":"Praga-Ratusz","freeBikes":9}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/9653/graph-data" method="GET" resourcePath="/station/9653/graph-data" id="31f531c5-c74c-47c9-9c2e-f1968dbb9419"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1253db89-b25e-492b-a1b1-a50aff8e32a9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"x":"2019-10-12T12:31:25.823","y":21},{"x":"2019-10-12T12:32:25","y":21},{"x":"2019-10-12T12:35:52.494","y":21},{"x":"2019-10-12T12:36:51.775","y":21},{"x":"2019-10-12T12:37:51.814","y":21},{"x":"2019-10-12T12:38:51.265","y":21},{"x":"2019-10-12T12:39:50.956","y":21},{"x":"2019-10-12T12:40:50.96","y":21},{"x":"2019-10-12T12:41:53.593","y":21},{"x":"2019-10-12T12:42:50.976","y":21},{"x":"2019-10-12T12:43:51.356","y":21},{"x":"2019-10-12T12:44:50.942","y":21},{"x":"2019-10-12T12:45:50.95","y":21},{"x":"2019-10-12T12:46:50.982","y":21},{"x":"2019-10-12T12:47:02.696","y":21},{"x":"2019-10-12T12:47:45.602","y":21},{"x":"2019-10-12T12:48:44.822","y":21},{"x":"2019-10-12T12:49:44.779","y":21},{"x":"2019-10-12T12:50:45.545","y":21},{"x":"2019-10-12T12:51:45.528","y":21},{"x":"2019-10-12T12:52:45.569","y":21},{"x":"2019-10-12T12:53:45.595","y":21},{"x":"2019-10-12T12:54:47.438","y":21},{"x":"2019-10-12T12:55:45.462","y":21},{"x":"2019-10-12T12:56:45.561","y":21},{"x":"2019-10-12T12:57:45.751","y":21},{"x":"2019-10-12T12:58:46.025","y":21},{"x":"2019-10-12T12:59:45.677","y":21},{"x":"2019-10-12T13:00:45.519","y":21},{"x":"2019-10-12T13:01:45.726","y":21},{"x":"2019-10-12T13:02:45.579","y":21},{"x":"2019-10-12T13:03:45.509","y":21},{"x":"2019-10-12T13:04:47.152","y":21},{"x":"2019-10-12T13:05:45.572","y":21},{"x":"2019-10-12T13:06:45.467","y":21},{"x":"2019-10-12T13:07:45.593","y":21},{"x":"2019-10-12T13:08:47.169","y":21},{"x":"2019-10-12T13:09:47.06","y":21},{"x":"2019-10-12T13:10:46.139","y":21},{"x":"2019-10-12T13:11:45.643","y":21},{"x":"2019-10-12T13:12:45.79","y":22},{"x":"2019-10-12T13:13:46.128","y":22},{"x":"2019-10-12T13:14:45.511","y":22},{"x":"2019-10-12T13:15:45.528","y":22},{"x":"2019-10-12T13:16:45.477","y":22},{"x":"2019-10-12T13:17:45.535","y":22},{"x":"2019-10-12T13:18:45.527","y":22},{"x":"2019-10-12T13:19:45.506","y":22},{"x":"2019-10-12T13:20:45.526","y":22},{"x":"2019-10-12T13:21:45.456","y":22},{"x":"2019-10-12T13:22:17.31","y":22},{"x":"2019-10-12T13:23:15.327","y":22},{"x":"2019-10-12T13:24:15.244","y":22},{"x":"2019-10-12T13:24:53.321","y":22},{"x":"2019-10-12T13:26:17.908","y":22},{"x":"2019-10-12T13:26:52.42","y":22},{"x":"2019-10-12T13:27:14.874","y":22},{"x":"2019-10-12T13:27:59.025","y":22},{"x":"2019-10-12T13:29:59.589","y":22},{"x":"2019-10-12T13:30:58.397","y":22},{"x":"2019-10-12T13:31:58.396","y":22},{"x":"2019-10-12T13:33:58.682","y":22},{"x":"2019-10-12T13:34:58.627","y":22},{"x":"2019-10-12T13:35:58.583","y":22},{"x":"2019-10-12T13:36:58.456","y":22},{"x":"2019-10-12T13:37:58.454","y":22},{"x":"2019-10-12T13:38:58.566","y":22},{"x":"2019-10-12T13:39:58.449","y":22},{"x":"2019-10-12T13:40:58.735","y":22},{"x":"2019-10-12T13:41:58.515","y":22},{"x":"2019-10-12T13:42:58.424","y":20},{"x":"2019-10-12T13:43:59.2","y":20},{"x":"2019-10-12T13:44:58.419","y":20},{"x":"2019-10-12T13:45:58.463","y":20},{"x":"2019-10-12T13:46:58.386","y":20},{"x":"2019-10-12T13:47:58.425","y":20},{"x":"2019-10-12T13:48:58.483","y":20},{"x":"2019-10-12T13:49:58.453","y":20},{"x":"2019-10-12T13:50:58.541","y":20},{"x":"2019-10-12T13:51:58.473","y":20},{"x":"2019-10-12T13:52:58.385","y":20},{"x":"2019-10-12T13:53:58.452","y":20},{"x":"2019-10-12T13:54:58.454","y":20},{"x":"2019-10-12T13:55:58.418","y":20},{"x":"2019-10-12T13:56:58.401","y":20},{"x":"2019-10-12T13:57:58.644","y":20},{"x":"2019-10-12T13:58:58.51","y":20},{"x":"2019-10-12T13:59:19.58","y":20},{"x":"2019-10-12T14:00:19.03","y":20},{"x":"2019-10-12T14:01:18.968","y":20},{"x":"2019-10-12T14:02:19.384","y":20},{"x":"2019-10-12T14:03:19.261","y":20},{"x":"2019-10-12T14:04:19.164","y":20},{"x":"2019-10-12T14:05:19.154","y":20},{"x":"2019-10-12T14:06:19.058","y":20},{"x":"2019-10-12T14:07:19.051","y":20},{"x":"2019-10-12T14:08:18.998","y":20},{"x":"2019-10-12T14:09:19.004","y":20},{"x":"2019-10-12T14:10:19.072","y":20},{"x":"2019-10-12T14:11:19.079","y":20},{"x":"2019-10-12T14:12:19.081","y":20},{"x":"2019-10-12T14:13:21.579","y":22},{"x":"2019-10-12T14:14:18.995","y":22},{"x":"2019-10-12T14:15:19.106","y":22},{"x":"2019-10-12T14:16:19.008","y":22},{"x":"2019-10-12T14:17:20.65","y":22},{"x":"2019-10-12T14:18:18.954","y":22},{"x":"2019-10-12T14:19:19.053","y":22},{"x":"2019-10-12T14:20:19.131","y":22},{"x":"2019-10-12T14:21:19.135","y":22},{"x":"2019-10-12T14:22:18.969","y":22},{"x":"2019-10-12T14:23:18.985","y":22},{"x":"2019-10-12T14:24:19.151","y":22},{"x":"2019-10-12T14:25:19.025","y":22},{"x":"2019-10-12T14:26:19.016","y":22},{"x":"2019-10-12T14:26:49.941","y":22},{"x":"2019-10-12T14:27:19.413","y":22},{"x":"2019-10-12T14:28:19.421","y":22},{"x":"2019-10-12T14:29:18.281","y":22},{"x":"2019-10-12T14:30:18.392","y":22},{"x":"2019-10-12T14:31:18.259","y":22},{"x":"2019-10-12T14:32:18.36","y":22},{"x":"2019-10-12T14:33:18.419","y":22},{"x":"2019-10-12T14:34:18.331","y":22},{"x":"2019-10-12T14:35:17.677","y":22},{"x":"2019-10-12T14:36:17.576","y":22},{"x":"2019-10-12T14:37:17.575","y":22},{"x":"2019-10-12T14:38:17.536","y":22},{"x":"2019-10-12T14:39:17.541","y":22},{"x":"2019-10-12T14:40:17.634","y":22},{"x":"2019-10-12T14:41:11.936","y":22},{"x":"2019-10-12T14:42:11.347","y":22},{"x":"2019-10-12T14:43:11.377","y":22},{"x":"2019-10-12T14:44:13.377","y":22},{"x":"2019-10-12T14:45:11.398","y":22},{"x":"2019-10-12T14:46:11.46","y":22},{"x":"2019-10-12T14:47:11.371","y":22},{"x":"2019-10-12T14:48:11.412","y":22},{"x":"2019-10-12T14:49:12.059","y":22},{"x":"2019-10-12T14:50:11.362","y":22},{"x":"2019-10-12T14:51:11.416","y":22},{"x":"2019-10-12T14:51:33.549","y":22},{"x":"2019-10-12T14:52:32.752","y":22},{"x":"2019-10-12T14:53:32.845","y":22},{"x":"2019-10-12T15:07:03.222","y":22},{"x":"2019-10-12T15:07:43.989","y":22},{"x":"2019-10-12T15:08:02.641","y":22},{"x":"2019-10-12T15:09:17.019","y":22},{"x":"2019-10-12T15:11:15.467","y":22},{"x":"2019-10-12T15:12:15.523","y":22},{"x":"2019-10-12T15:13:15.425","y":22},{"x":"2019-10-12T15:14:17.474","y":21},{"x":"2019-10-12T15:15:15.432","y":21},{"x":"2019-10-12T15:16:15.472","y":21},{"x":"2019-10-12T15:17:15.465","y":21},{"x":"2019-10-12T15:18:15.442","y":21},{"x":"2019-10-12T15:19:15.717","y":21},{"x":"2019-10-12T15:20:16.853","y":21},{"x":"2019-10-12T15:21:15.621","y":21},{"x":"2019-10-12T15:22:15.492","y":21},{"x":"2019-10-12T15:23:15.466","y":21},{"x":"2019-10-12T15:23:31.992","y":21},{"x":"2019-10-12T15:24:48.041","y":21},{"x":"2019-10-12T15:25:31.307","y":21},{"x":"2019-10-12T15:26:38.23","y":21},{"x":"2019-10-12T15:27:37.288","y":21},{"x":"2019-10-12T15:28:34.213","y":21},{"x":"2019-10-12T15:29:30.482","y":21},{"x":"2019-10-12T15:36:03.501","y":21},{"x":"2019-10-12T15:37:02.967","y":21},{"x":"2019-10-12T15:38:02.842","y":21},{"x":"2019-10-12T15:39:02.88","y":21},{"x":"2019-10-12T15:39:13.086","y":21},{"x":"2019-10-12T15:40:12.471","y":21},{"x":"2019-10-12T15:41:12.434","y":21},{"x":"2019-10-12T15:42:12.507","y":21},{"x":"2019-10-12T15:43:12.468","y":21},{"x":"2019-10-12T15:44:12.528","y":21},{"x":"2019-10-12T15:45:14.664","y":20},{"x":"2019-10-12T15:46:12.514","y":20},{"x":"2019-10-12T15:47:13.585","y":20},{"x":"2019-10-12T15:48:12.487","y":20},{"x":"2019-10-12T15:49:12.47","y":20},{"x":"2019-10-12T15:50:12.574","y":20},{"x":"2019-10-12T15:51:12.449","y":20},{"x":"2019-10-12T15:52:12.486","y":20},{"x":"2019-10-12T15:53:12.459","y":20},{"x":"2019-10-12T15:54:12.455","y":20},{"x":"2019-10-12T15:55:12.527","y":20},{"x":"2019-10-12T15:56:12.631","y":20},{"x":"2019-10-12T15:57:16.058","y":20},{"x":"2019-10-12T15:58:12.505","y":20},{"x":"2019-10-12T15:59:12.597","y":20},{"x":"2019-10-12T16:00:12.551","y":20},{"x":"2019-10-12T16:01:12.478","y":20},{"x":"2019-10-12T16:02:12.477","y":20},{"x":"2019-10-12T16:03:12.617","y":20},{"x":"2019-10-12T16:04:12.505","y":20},{"x":"2019-10-12T16:05:12.534","y":20},{"x":"2019-10-12T16:06:12.522","y":20},{"x":"2019-10-12T16:07:12.418","y":20},{"x":"2019-10-12T16:08:12.537","y":20},{"x":"2019-10-12T16:09:12.548","y":20},{"x":"2019-10-12T16:10:12.668","y":20},{"x":"2019-10-12T16:11:12.417","y":20},{"x":"2019-10-12T16:12:12.447","y":20},{"x":"2019-10-12T16:13:12.478","y":20},{"x":"2019-10-12T16:14:12.473","y":20},{"x":"2019-10-12T16:15:12.481","y":20},{"x":"2019-10-12T16:16:14.856","y":22},{"x":"2019-10-12T16:17:13.303","y":22}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/9482/graph-data" method="GET" resourcePath="/station/9482/graph-data" id="93435fef-70d6-4680-be93-11b5f4022529"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="36e383f4-3b04-4724-9a94-3582df1f39a1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"x":"2019-10-12T12:31:25.823","y":15},{"x":"2019-10-12T12:32:25","y":15},{"x":"2019-10-12T12:35:52.494","y":15},{"x":"2019-10-12T12:36:51.775","y":15},{"x":"2019-10-12T12:37:51.814","y":15},{"x":"2019-10-12T12:38:51.265","y":15},{"x":"2019-10-12T12:39:50.956","y":15},{"x":"2019-10-12T12:40:50.96","y":15},{"x":"2019-10-12T12:41:53.593","y":16},{"x":"2019-10-12T12:42:50.976","y":16},{"x":"2019-10-12T12:43:51.356","y":16},{"x":"2019-10-12T12:44:50.942","y":16},{"x":"2019-10-12T12:45:50.95","y":16},{"x":"2019-10-12T12:46:50.982","y":16},{"x":"2019-10-12T12:47:02.696","y":16},{"x":"2019-10-12T12:47:45.602","y":16},{"x":"2019-10-12T12:48:44.822","y":16},{"x":"2019-10-12T12:49:44.779","y":16},{"x":"2019-10-12T12:50:45.545","y":16},{"x":"2019-10-12T12:51:45.528","y":16},{"x":"2019-10-12T12:52:45.569","y":16},{"x":"2019-10-12T12:53:45.595","y":16},{"x":"2019-10-12T12:54:47.438","y":16},{"x":"2019-10-12T12:55:45.462","y":16},{"x":"2019-10-12T12:56:45.561","y":16},{"x":"2019-10-12T12:57:45.751","y":16},{"x":"2019-10-12T12:58:46.025","y":16},{"x":"2019-10-12T12:59:45.677","y":16},{"x":"2019-10-12T13:00:45.519","y":16},{"x":"2019-10-12T13:01:45.726","y":16},{"x":"2019-10-12T13:02:45.579","y":16},{"x":"2019-10-12T13:03:45.509","y":16},{"x":"2019-10-12T13:04:47.152","y":16},{"x":"2019-10-12T13:05:45.572","y":16},{"x":"2019-10-12T13:06:45.467","y":16},{"x":"2019-10-12T13:07:45.593","y":16},{"x":"2019-10-12T13:08:47.169","y":16},{"x":"2019-10-12T13:09:47.06","y":16},{"x":"2019-10-12T13:10:46.139","y":16},{"x":"2019-10-12T13:11:45.643","y":16},{"x":"2019-10-12T13:12:45.79","y":16},{"x":"2019-10-12T13:13:46.128","y":16},{"x":"2019-10-12T13:14:45.511","y":16},{"x":"2019-10-12T13:15:45.528","y":16},{"x":"2019-10-12T13:16:45.477","y":16},{"x":"2019-10-12T13:17:45.535","y":16},{"x":"2019-10-12T13:18:45.527","y":16},{"x":"2019-10-12T13:19:45.506","y":16},{"x":"2019-10-12T13:20:45.526","y":16},{"x":"2019-10-12T13:21:45.456","y":16},{"x":"2019-10-12T13:22:17.31","y":16},{"x":"2019-10-12T13:23:15.327","y":16},{"x":"2019-10-12T13:24:15.244","y":16},{"x":"2019-10-12T13:24:53.321","y":16},{"x":"2019-10-12T13:26:17.908","y":16},{"x":"2019-10-12T13:26:52.42","y":16},{"x":"2019-10-12T13:27:14.874","y":16},{"x":"2019-10-12T13:27:59.025","y":16},{"x":"2019-10-12T13:29:59.589","y":16},{"x":"2019-10-12T13:30:58.397","y":16},{"x":"2019-10-12T13:31:58.396","y":16},{"x":"2019-10-12T13:33:58.682","y":16},{"x":"2019-10-12T13:34:58.627","y":16},{"x":"2019-10-12T13:35:58.583","y":16},{"x":"2019-10-12T13:36:58.456","y":16},{"x":"2019-10-12T13:37:58.454","y":16},{"x":"2019-10-12T13:38:58.566","y":16},{"x":"2019-10-12T13:39:58.449","y":16},{"x":"2019-10-12T13:40:58.735","y":16},{"x":"2019-10-12T13:41:58.515","y":16},{"x":"2019-10-12T13:42:58.424","y":14},{"x":"2019-10-12T13:43:59.2","y":14},{"x":"2019-10-12T13:44:58.419","y":14},{"x":"2019-10-12T13:45:58.463","y":14},{"x":"2019-10-12T13:46:58.386","y":14},{"x":"2019-10-12T13:47:58.425","y":14},{"x":"2019-10-12T13:48:58.483","y":14},{"x":"2019-10-12T13:49:58.453","y":14},{"x":"2019-10-12T13:50:58.541","y":14},{"x":"2019-10-12T13:51:58.473","y":14},{"x":"2019-10-12T13:52:58.385","y":14},{"x":"2019-10-12T13:53:58.452","y":14},{"x":"2019-10-12T13:54:58.454","y":14},{"x":"2019-10-12T13:55:58.418","y":14},{"x":"2019-10-12T13:56:58.401","y":14},{"x":"2019-10-12T13:57:58.644","y":14},{"x":"2019-10-12T13:58:58.51","y":14},{"x":"2019-10-12T13:59:19.58","y":14},{"x":"2019-10-12T14:00:19.03","y":14},{"x":"2019-10-12T14:01:18.968","y":14},{"x":"2019-10-12T14:02:19.384","y":14},{"x":"2019-10-12T14:03:19.261","y":14},{"x":"2019-10-12T14:04:19.164","y":14},{"x":"2019-10-12T14:05:19.154","y":14},{"x":"2019-10-12T14:06:19.058","y":14},{"x":"2019-10-12T14:07:19.051","y":14},{"x":"2019-10-12T14:08:18.998","y":14},{"x":"2019-10-12T14:09:19.004","y":14},{"x":"2019-10-12T14:10:19.072","y":14},{"x":"2019-10-12T14:11:19.079","y":14},{"x":"2019-10-12T14:12:19.081","y":14},{"x":"2019-10-12T14:13:21.579","y":18},{"x":"2019-10-12T14:14:18.995","y":18},{"x":"2019-10-12T14:15:19.106","y":18},{"x":"2019-10-12T14:16:19.008","y":18},{"x":"2019-10-12T14:17:20.65","y":18},{"x":"2019-10-12T14:18:18.954","y":18},{"x":"2019-10-12T14:19:19.053","y":18},{"x":"2019-10-12T14:20:19.131","y":18},{"x":"2019-10-12T14:21:19.135","y":18},{"x":"2019-10-12T14:22:18.969","y":18},{"x":"2019-10-12T14:23:18.985","y":18},{"x":"2019-10-12T14:24:19.151","y":18},{"x":"2019-10-12T14:25:19.025","y":18},{"x":"2019-10-12T14:26:19.016","y":18},{"x":"2019-10-12T14:26:49.941","y":18},{"x":"2019-10-12T14:27:19.413","y":18},{"x":"2019-10-12T14:28:19.421","y":18},{"x":"2019-10-12T14:29:18.281","y":18},{"x":"2019-10-12T14:30:18.392","y":18},{"x":"2019-10-12T14:31:18.259","y":18},{"x":"2019-10-12T14:32:18.36","y":18},{"x":"2019-10-12T14:33:18.419","y":18},{"x":"2019-10-12T14:34:18.331","y":18},{"x":"2019-10-12T14:35:17.677","y":18},{"x":"2019-10-12T14:36:17.576","y":18},{"x":"2019-10-12T14:37:17.575","y":18},{"x":"2019-10-12T14:38:17.536","y":18},{"x":"2019-10-12T14:39:17.541","y":18},{"x":"2019-10-12T14:40:17.634","y":18},{"x":"2019-10-12T14:41:11.936","y":18},{"x":"2019-10-12T14:42:11.347","y":18},{"x":"2019-10-12T14:43:11.377","y":18},{"x":"2019-10-12T14:44:13.377","y":19},{"x":"2019-10-12T14:45:11.398","y":19},{"x":"2019-10-12T14:46:11.46","y":19},{"x":"2019-10-12T14:47:11.371","y":19},{"x":"2019-10-12T14:48:11.412","y":19},{"x":"2019-10-12T14:49:12.059","y":19},{"x":"2019-10-12T14:50:11.362","y":19},{"x":"2019-10-12T14:51:11.416","y":19},{"x":"2019-10-12T14:51:33.549","y":19},{"x":"2019-10-12T14:52:32.752","y":19},{"x":"2019-10-12T14:53:32.845","y":19},{"x":"2019-10-12T15:07:03.222","y":19},{"x":"2019-10-12T15:07:43.989","y":19},{"x":"2019-10-12T15:08:02.641","y":19},{"x":"2019-10-12T15:09:17.019","y":19},{"x":"2019-10-12T15:11:15.467","y":19},{"x":"2019-10-12T15:12:15.523","y":19},{"x":"2019-10-12T15:13:15.425","y":19},{"x":"2019-10-12T15:14:17.474","y":22},{"x":"2019-10-12T15:15:15.432","y":22},{"x":"2019-10-12T15:16:15.472","y":22},{"x":"2019-10-12T15:17:15.465","y":22},{"x":"2019-10-12T15:18:15.442","y":22},{"x":"2019-10-12T15:19:15.717","y":22},{"x":"2019-10-12T15:20:16.853","y":22},{"x":"2019-10-12T15:21:15.621","y":22},{"x":"2019-10-12T15:22:15.492","y":22},{"x":"2019-10-12T15:23:15.466","y":22},{"x":"2019-10-12T15:23:31.992","y":22},{"x":"2019-10-12T15:24:48.041","y":22},{"x":"2019-10-12T15:25:31.307","y":22},{"x":"2019-10-12T15:26:38.23","y":22},{"x":"2019-10-12T15:27:37.288","y":22},{"x":"2019-10-12T15:28:34.213","y":22},{"x":"2019-10-12T15:29:30.482","y":22},{"x":"2019-10-12T15:36:03.501","y":22},{"x":"2019-10-12T15:37:02.967","y":22},{"x":"2019-10-12T15:38:02.842","y":22},{"x":"2019-10-12T15:39:02.88","y":22},{"x":"2019-10-12T15:39:13.086","y":22},{"x":"2019-10-12T15:40:12.471","y":22},{"x":"2019-10-12T15:41:12.434","y":22},{"x":"2019-10-12T15:42:12.507","y":22},{"x":"2019-10-12T15:43:12.468","y":22},{"x":"2019-10-12T15:44:12.528","y":22},{"x":"2019-10-12T15:45:14.664","y":23},{"x":"2019-10-12T15:46:12.514","y":23},{"x":"2019-10-12T15:47:13.585","y":23},{"x":"2019-10-12T15:48:12.487","y":23},{"x":"2019-10-12T15:49:12.47","y":23},{"x":"2019-10-12T15:50:12.574","y":23},{"x":"2019-10-12T15:51:12.449","y":23},{"x":"2019-10-12T15:52:12.486","y":23},{"x":"2019-10-12T15:53:12.459","y":23},{"x":"2019-10-12T15:54:12.455","y":23},{"x":"2019-10-12T15:55:12.527","y":23},{"x":"2019-10-12T15:56:12.631","y":23},{"x":"2019-10-12T15:57:16.058","y":23},{"x":"2019-10-12T15:58:12.505","y":23},{"x":"2019-10-12T15:59:12.597","y":23},{"x":"2019-10-12T16:00:12.551","y":23},{"x":"2019-10-12T16:01:12.478","y":23},{"x":"2019-10-12T16:02:12.477","y":23},{"x":"2019-10-12T16:03:12.617","y":23},{"x":"2019-10-12T16:04:12.505","y":23},{"x":"2019-10-12T16:05:12.534","y":23},{"x":"2019-10-12T16:06:12.522","y":23},{"x":"2019-10-12T16:07:12.418","y":23},{"x":"2019-10-12T16:08:12.537","y":23},{"x":"2019-10-12T16:09:12.548","y":23},{"x":"2019-10-12T16:10:12.668","y":23},{"x":"2019-10-12T16:11:12.417","y":23},{"x":"2019-10-12T16:12:12.447","y":23},{"x":"2019-10-12T16:13:12.478","y":23},{"x":"2019-10-12T16:14:12.473","y":23},{"x":"2019-10-12T16:15:12.481","y":23},{"x":"2019-10-12T16:16:14.856","y":24},{"x":"2019-10-12T16:17:13.303","y":24}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/6445/graph-data" method="GET" resourcePath="/station/6445/graph-data" id="404f263f-c8f9-45bc-bb71-d37ffba82e39"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="68a5ef27-02b6-4a0e-a4dc-09f6b7d574c1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"x":"2019-10-12T12:31:25.823","y":20},{"x":"2019-10-12T12:32:25","y":20},{"x":"2019-10-12T12:35:52.494","y":20},{"x":"2019-10-12T12:36:51.775","y":20},{"x":"2019-10-12T12:37:51.814","y":20},{"x":"2019-10-12T12:38:51.265","y":20},{"x":"2019-10-12T12:39:50.956","y":20},{"x":"2019-10-12T12:40:50.96","y":20},{"x":"2019-10-12T12:41:53.593","y":20},{"x":"2019-10-12T12:42:50.976","y":20},{"x":"2019-10-12T12:43:51.356","y":20},{"x":"2019-10-12T12:44:50.942","y":20},{"x":"2019-10-12T12:45:50.95","y":20},{"x":"2019-10-12T12:46:50.982","y":20},{"x":"2019-10-12T12:47:02.696","y":20},{"x":"2019-10-12T12:47:45.602","y":20},{"x":"2019-10-12T12:48:44.822","y":20},{"x":"2019-10-12T12:49:44.779","y":20},{"x":"2019-10-12T12:50:45.545","y":20},{"x":"2019-10-12T12:51:45.528","y":20},{"x":"2019-10-12T12:52:45.569","y":20},{"x":"2019-10-12T12:53:45.595","y":20},{"x":"2019-10-12T12:54:47.438","y":20},{"x":"2019-10-12T12:55:45.462","y":20},{"x":"2019-10-12T12:56:45.561","y":20},{"x":"2019-10-12T12:57:45.751","y":20},{"x":"2019-10-12T12:58:46.025","y":20},{"x":"2019-10-12T12:59:45.677","y":20},{"x":"2019-10-12T13:00:45.519","y":20},{"x":"2019-10-12T13:01:45.726","y":20},{"x":"2019-10-12T13:02:45.579","y":20},{"x":"2019-10-12T13:03:45.509","y":20},{"x":"2019-10-12T13:04:47.152","y":20},{"x":"2019-10-12T13:05:45.572","y":20},{"x":"2019-10-12T13:06:45.467","y":20},{"x":"2019-10-12T13:07:45.593","y":20},{"x":"2019-10-12T13:08:47.169","y":20},{"x":"2019-10-12T13:09:47.06","y":20},{"x":"2019-10-12T13:10:46.139","y":20},{"x":"2019-10-12T13:11:45.643","y":20},{"x":"2019-10-12T13:12:45.79","y":20},{"x":"2019-10-12T13:13:46.128","y":20},{"x":"2019-10-12T13:14:45.511","y":20},{"x":"2019-10-12T13:15:45.528","y":20},{"x":"2019-10-12T13:16:45.477","y":20},{"x":"2019-10-12T13:17:45.535","y":20},{"x":"2019-10-12T13:18:45.527","y":20},{"x":"2019-10-12T13:19:45.506","y":20},{"x":"2019-10-12T13:20:45.526","y":20},{"x":"2019-10-12T13:21:45.456","y":20},{"x":"2019-10-12T13:22:17.31","y":20},{"x":"2019-10-12T13:23:15.327","y":20},{"x":"2019-10-12T13:24:15.244","y":20},{"x":"2019-10-12T13:24:53.321","y":20},{"x":"2019-10-12T13:26:17.908","y":20},{"x":"2019-10-12T13:26:52.42","y":20},{"x":"2019-10-12T13:27:14.874","y":20},{"x":"2019-10-12T13:27:59.025","y":20},{"x":"2019-10-12T13:29:59.589","y":20},{"x":"2019-10-12T13:30:58.397","y":20},{"x":"2019-10-12T13:31:58.396","y":20},{"x":"2019-10-12T13:33:58.682","y":20},{"x":"2019-10-12T13:34:58.627","y":20},{"x":"2019-10-12T13:35:58.583","y":20},{"x":"2019-10-12T13:36:58.456","y":20},{"x":"2019-10-12T13:37:58.454","y":20},{"x":"2019-10-12T13:38:58.566","y":20},{"x":"2019-10-12T13:39:58.449","y":20},{"x":"2019-10-12T13:40:58.735","y":20},{"x":"2019-10-12T13:41:58.515","y":20},{"x":"2019-10-12T13:42:58.424","y":20},{"x":"2019-10-12T13:43:59.2","y":20},{"x":"2019-10-12T13:44:58.419","y":20},{"x":"2019-10-12T13:45:58.463","y":20},{"x":"2019-10-12T13:46:58.386","y":20},{"x":"2019-10-12T13:47:58.425","y":20},{"x":"2019-10-12T13:48:58.483","y":20},{"x":"2019-10-12T13:49:58.453","y":20},{"x":"2019-10-12T13:50:58.541","y":20},{"x":"2019-10-12T13:51:58.473","y":20},{"x":"2019-10-12T13:52:58.385","y":20},{"x":"2019-10-12T13:53:58.452","y":20},{"x":"2019-10-12T13:54:58.454","y":20},{"x":"2019-10-12T13:55:58.418","y":20},{"x":"2019-10-12T13:56:58.401","y":20},{"x":"2019-10-12T13:57:58.644","y":20},{"x":"2019-10-12T13:58:58.51","y":20},{"x":"2019-10-12T13:59:19.58","y":20},{"x":"2019-10-12T14:00:19.03","y":20},{"x":"2019-10-12T14:01:18.968","y":20},{"x":"2019-10-12T14:02:19.384","y":20},{"x":"2019-10-12T14:03:19.261","y":20},{"x":"2019-10-12T14:04:19.164","y":20},{"x":"2019-10-12T14:05:19.154","y":20},{"x":"2019-10-12T14:06:19.058","y":20},{"x":"2019-10-12T14:07:19.051","y":20},{"x":"2019-10-12T14:08:18.998","y":20},{"x":"2019-10-12T14:09:19.004","y":20},{"x":"2019-10-12T14:10:19.072","y":20},{"x":"2019-10-12T14:11:19.079","y":20},{"x":"2019-10-12T14:12:19.081","y":20},{"x":"2019-10-12T14:13:21.579","y":20},{"x":"2019-10-12T14:14:18.995","y":20},{"x":"2019-10-12T14:15:19.106","y":20},{"x":"2019-10-12T14:16:19.008","y":20},{"x":"2019-10-12T14:17:20.65","y":20},{"x":"2019-10-12T14:18:18.954","y":20},{"x":"2019-10-12T14:19:19.053","y":20},{"x":"2019-10-12T14:20:19.131","y":20},{"x":"2019-10-12T14:21:19.135","y":20},{"x":"2019-10-12T14:22:18.969","y":20},{"x":"2019-10-12T14:23:18.985","y":20},{"x":"2019-10-12T14:24:19.151","y":20},{"x":"2019-10-12T14:25:19.025","y":20},{"x":"2019-10-12T14:26:19.016","y":20},{"x":"2019-10-12T14:26:49.941","y":20},{"x":"2019-10-12T14:27:19.413","y":20},{"x":"2019-10-12T14:28:19.421","y":20},{"x":"2019-10-12T14:29:18.281","y":20},{"x":"2019-10-12T14:30:18.392","y":20},{"x":"2019-10-12T14:31:18.259","y":20},{"x":"2019-10-12T14:32:18.36","y":20},{"x":"2019-10-12T14:33:18.419","y":20},{"x":"2019-10-12T14:34:18.331","y":20},{"x":"2019-10-12T14:35:17.677","y":20},{"x":"2019-10-12T14:36:17.576","y":20},{"x":"2019-10-12T14:37:17.575","y":20},{"x":"2019-10-12T14:38:17.536","y":20},{"x":"2019-10-12T14:39:17.541","y":20},{"x":"2019-10-12T14:40:17.634","y":20},{"x":"2019-10-12T14:41:11.936","y":20},{"x":"2019-10-12T14:42:11.347","y":20},{"x":"2019-10-12T14:43:11.377","y":20},{"x":"2019-10-12T14:44:13.377","y":20},{"x":"2019-10-12T14:45:11.398","y":20},{"x":"2019-10-12T14:46:11.46","y":20},{"x":"2019-10-12T14:47:11.371","y":20},{"x":"2019-10-12T14:48:11.412","y":20},{"x":"2019-10-12T14:49:12.059","y":20},{"x":"2019-10-12T14:50:11.362","y":20},{"x":"2019-10-12T14:51:11.416","y":20},{"x":"2019-10-12T14:51:33.549","y":20},{"x":"2019-10-12T14:52:32.752","y":20},{"x":"2019-10-12T14:53:32.845","y":20},{"x":"2019-10-12T15:07:03.222","y":20},{"x":"2019-10-12T15:07:43.989","y":20},{"x":"2019-10-12T15:08:02.641","y":20},{"x":"2019-10-12T15:09:17.019","y":20},{"x":"2019-10-12T15:11:15.467","y":20},{"x":"2019-10-12T15:12:15.523","y":20},{"x":"2019-10-12T15:13:15.425","y":20},{"x":"2019-10-12T15:14:17.474","y":20},{"x":"2019-10-12T15:15:15.432","y":20},{"x":"2019-10-12T15:16:15.472","y":20},{"x":"2019-10-12T15:17:15.465","y":20},{"x":"2019-10-12T15:18:15.442","y":20},{"x":"2019-10-12T15:19:15.717","y":20},{"x":"2019-10-12T15:20:16.853","y":20},{"x":"2019-10-12T15:21:15.621","y":20},{"x":"2019-10-12T15:22:15.492","y":20},{"x":"2019-10-12T15:23:15.466","y":20},{"x":"2019-10-12T15:23:31.992","y":20},{"x":"2019-10-12T15:24:48.041","y":20},{"x":"2019-10-12T15:25:31.307","y":20},{"x":"2019-10-12T15:26:38.23","y":20},{"x":"2019-10-12T15:27:37.288","y":20},{"x":"2019-10-12T15:28:34.213","y":20},{"x":"2019-10-12T15:29:30.482","y":20},{"x":"2019-10-12T15:36:03.501","y":20},{"x":"2019-10-12T15:37:02.967","y":20},{"x":"2019-10-12T15:38:02.842","y":20},{"x":"2019-10-12T15:39:02.88","y":20},{"x":"2019-10-12T15:39:13.086","y":20},{"x":"2019-10-12T15:40:12.471","y":20},{"x":"2019-10-12T15:41:12.434","y":20},{"x":"2019-10-12T15:42:12.507","y":20},{"x":"2019-10-12T15:43:12.468","y":20},{"x":"2019-10-12T15:44:12.528","y":20},{"x":"2019-10-12T15:45:14.664","y":19},{"x":"2019-10-12T15:46:12.514","y":19},{"x":"2019-10-12T15:47:13.585","y":19},{"x":"2019-10-12T15:48:12.487","y":19},{"x":"2019-10-12T15:49:12.47","y":19},{"x":"2019-10-12T15:50:12.574","y":19},{"x":"2019-10-12T15:51:12.449","y":19},{"x":"2019-10-12T15:52:12.486","y":19},{"x":"2019-10-12T15:53:12.459","y":19},{"x":"2019-10-12T15:54:12.455","y":19},{"x":"2019-10-12T15:55:12.527","y":19},{"x":"2019-10-12T15:56:12.631","y":19},{"x":"2019-10-12T15:57:16.058","y":19},{"x":"2019-10-12T15:58:12.505","y":19},{"x":"2019-10-12T15:59:12.597","y":19},{"x":"2019-10-12T16:00:12.551","y":19},{"x":"2019-10-12T16:01:12.478","y":19},{"x":"2019-10-12T16:02:12.477","y":19},{"x":"2019-10-12T16:03:12.617","y":19},{"x":"2019-10-12T16:04:12.505","y":19},{"x":"2019-10-12T16:05:12.534","y":19},{"x":"2019-10-12T16:06:12.522","y":19},{"x":"2019-10-12T16:07:12.418","y":19},{"x":"2019-10-12T16:08:12.537","y":19},{"x":"2019-10-12T16:09:12.548","y":19},{"x":"2019-10-12T16:10:12.668","y":19},{"x":"2019-10-12T16:11:12.417","y":19},{"x":"2019-10-12T16:12:12.447","y":19},{"x":"2019-10-12T16:13:12.478","y":19},{"x":"2019-10-12T16:14:12.473","y":19},{"x":"2019-10-12T16:15:12.481","y":19},{"x":"2019-10-12T16:16:14.856","y":19},{"x":"2019-10-12T16:17:13.303","y":19},{"x":"2019-10-12T16:18:12.527","y":19}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/9678/graph-data" method="GET" resourcePath="/station/9678/graph-data" id="313a39ee-4c52-4e23-82da-15ac3149eb6e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="a0ebee15-d917-4fe8-92a5-270d183ea2c9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"x":"2019-10-12T12:31:25.823","y":9},{"x":"2019-10-12T12:32:25","y":9},{"x":"2019-10-12T12:35:52.494","y":9},{"x":"2019-10-12T12:36:51.775","y":9},{"x":"2019-10-12T12:37:51.814","y":9},{"x":"2019-10-12T12:38:51.265","y":9},{"x":"2019-10-12T12:39:50.956","y":9},{"x":"2019-10-12T12:40:50.96","y":9},{"x":"2019-10-12T12:41:53.593","y":8},{"x":"2019-10-12T12:42:50.976","y":8},{"x":"2019-10-12T12:43:51.356","y":8},{"x":"2019-10-12T12:44:50.942","y":8},{"x":"2019-10-12T12:45:50.95","y":8},{"x":"2019-10-12T12:46:50.982","y":8},{"x":"2019-10-12T12:47:02.696","y":8},{"x":"2019-10-12T12:47:45.602","y":8},{"x":"2019-10-12T12:48:44.822","y":8},{"x":"2019-10-12T12:49:44.779","y":8},{"x":"2019-10-12T12:50:45.545","y":8},{"x":"2019-10-12T12:51:45.528","y":8},{"x":"2019-10-12T12:52:45.569","y":8},{"x":"2019-10-12T12:53:45.595","y":8},{"x":"2019-10-12T12:54:47.438","y":8},{"x":"2019-10-12T12:55:45.462","y":8},{"x":"2019-10-12T12:56:45.561","y":8},{"x":"2019-10-12T12:57:45.751","y":8},{"x":"2019-10-12T12:58:46.025","y":8},{"x":"2019-10-12T12:59:45.677","y":8},{"x":"2019-10-12T13:00:45.519","y":8},{"x":"2019-10-12T13:01:45.726","y":8},{"x":"2019-10-12T13:02:45.579","y":8},{"x":"2019-10-12T13:03:45.509","y":8},{"x":"2019-10-12T13:04:47.152","y":8},{"x":"2019-10-12T13:05:45.572","y":8},{"x":"2019-10-12T13:06:45.467","y":8},{"x":"2019-10-12T13:07:45.593","y":8},{"x":"2019-10-12T13:08:47.169","y":8},{"x":"2019-10-12T13:09:47.06","y":8},{"x":"2019-10-12T13:10:46.139","y":8},{"x":"2019-10-12T13:11:45.643","y":8},{"x":"2019-10-12T13:12:45.79","y":9},{"x":"2019-10-12T13:13:46.128","y":9},{"x":"2019-10-12T13:14:45.511","y":9},{"x":"2019-10-12T13:15:45.528","y":9},{"x":"2019-10-12T13:16:45.477","y":9},{"x":"2019-10-12T13:17:45.535","y":9},{"x":"2019-10-12T13:18:45.527","y":9},{"x":"2019-10-12T13:19:45.506","y":9},{"x":"2019-10-12T13:20:45.526","y":9},{"x":"2019-10-12T13:21:45.456","y":9},{"x":"2019-10-12T13:22:17.31","y":9},{"x":"2019-10-12T13:23:15.327","y":9},{"x":"2019-10-12T13:24:15.244","y":9},{"x":"2019-10-12T13:24:53.321","y":9},{"x":"2019-10-12T13:26:17.908","y":9},{"x":"2019-10-12T13:26:52.42","y":9},{"x":"2019-10-12T13:27:14.874","y":9},{"x":"2019-10-12T13:27:59.025","y":9},{"x":"2019-10-12T13:29:59.589","y":9},{"x":"2019-10-12T13:30:58.397","y":9},{"x":"2019-10-12T13:31:58.396","y":9},{"x":"2019-10-12T13:33:58.682","y":9},{"x":"2019-10-12T13:34:58.627","y":9},{"x":"2019-10-12T13:35:58.583","y":9},{"x":"2019-10-12T13:36:58.456","y":9},{"x":"2019-10-12T13:37:58.454","y":9},{"x":"2019-10-12T13:38:58.566","y":9},{"x":"2019-10-12T13:39:58.449","y":9},{"x":"2019-10-12T13:40:58.735","y":9},{"x":"2019-10-12T13:41:58.515","y":9},{"x":"2019-10-12T13:42:58.424","y":11},{"x":"2019-10-12T13:43:59.2","y":11},{"x":"2019-10-12T13:44:58.419","y":11},{"x":"2019-10-12T13:45:58.463","y":11},{"x":"2019-10-12T13:46:58.386","y":11},{"x":"2019-10-12T13:47:58.425","y":11},{"x":"2019-10-12T13:48:58.483","y":11},{"x":"2019-10-12T13:49:58.453","y":11},{"x":"2019-10-12T13:50:58.541","y":11},{"x":"2019-10-12T13:51:58.473","y":11},{"x":"2019-10-12T13:52:58.385","y":11},{"x":"2019-10-12T13:53:58.452","y":11},{"x":"2019-10-12T13:54:58.454","y":11},{"x":"2019-10-12T13:55:58.418","y":11},{"x":"2019-10-12T13:56:58.401","y":11},{"x":"2019-10-12T13:57:58.644","y":11},{"x":"2019-10-12T13:58:58.51","y":11},{"x":"2019-10-12T13:59:19.58","y":11},{"x":"2019-10-12T14:00:19.03","y":11},{"x":"2019-10-12T14:01:18.968","y":11},{"x":"2019-10-12T14:02:19.384","y":11},{"x":"2019-10-12T14:03:19.261","y":11},{"x":"2019-10-12T14:04:19.164","y":11},{"x":"2019-10-12T14:05:19.154","y":11},{"x":"2019-10-12T14:06:19.058","y":11},{"x":"2019-10-12T14:07:19.051","y":11},{"x":"2019-10-12T14:08:18.998","y":11},{"x":"2019-10-12T14:09:19.004","y":11},{"x":"2019-10-12T14:10:19.072","y":11},{"x":"2019-10-12T14:11:19.079","y":11},{"x":"2019-10-12T14:12:19.081","y":11},{"x":"2019-10-12T14:13:21.579","y":9},{"x":"2019-10-12T14:14:18.995","y":9},{"x":"2019-10-12T14:15:19.106","y":9},{"x":"2019-10-12T14:16:19.008","y":9},{"x":"2019-10-12T14:17:20.65","y":9},{"x":"2019-10-12T14:18:18.954","y":9},{"x":"2019-10-12T14:19:19.053","y":9},{"x":"2019-10-12T14:20:19.131","y":9},{"x":"2019-10-12T14:21:19.135","y":9},{"x":"2019-10-12T14:22:18.969","y":9},{"x":"2019-10-12T14:23:18.985","y":9},{"x":"2019-10-12T14:24:19.151","y":9},{"x":"2019-10-12T14:25:19.025","y":9},{"x":"2019-10-12T14:26:19.016","y":9},{"x":"2019-10-12T14:26:49.941","y":9},{"x":"2019-10-12T14:27:19.413","y":9},{"x":"2019-10-12T14:28:19.421","y":9},{"x":"2019-10-12T14:29:18.281","y":9},{"x":"2019-10-12T14:30:18.392","y":9},{"x":"2019-10-12T14:31:18.259","y":9},{"x":"2019-10-12T14:32:18.36","y":9},{"x":"2019-10-12T14:33:18.419","y":9},{"x":"2019-10-12T14:34:18.331","y":9},{"x":"2019-10-12T14:35:17.677","y":9},{"x":"2019-10-12T14:36:17.576","y":9},{"x":"2019-10-12T14:37:17.575","y":9},{"x":"2019-10-12T14:38:17.536","y":9},{"x":"2019-10-12T14:39:17.541","y":9},{"x":"2019-10-12T14:40:17.634","y":9},{"x":"2019-10-12T14:41:11.936","y":9},{"x":"2019-10-12T14:42:11.347","y":9},{"x":"2019-10-12T14:43:11.377","y":9},{"x":"2019-10-12T14:44:13.377","y":8},{"x":"2019-10-12T14:45:11.398","y":8},{"x":"2019-10-12T14:46:11.46","y":8},{"x":"2019-10-12T14:47:11.371","y":8},{"x":"2019-10-12T14:48:11.412","y":8},{"x":"2019-10-12T14:49:12.059","y":8},{"x":"2019-10-12T14:50:11.362","y":8},{"x":"2019-10-12T14:51:11.416","y":8},{"x":"2019-10-12T14:51:33.549","y":8},{"x":"2019-10-12T14:52:32.752","y":8},{"x":"2019-10-12T14:53:32.845","y":8},{"x":"2019-10-12T15:07:03.222","y":8},{"x":"2019-10-12T15:07:43.989","y":8},{"x":"2019-10-12T15:08:02.641","y":8},{"x":"2019-10-12T15:09:17.019","y":8},{"x":"2019-10-12T15:11:15.467","y":8},{"x":"2019-10-12T15:12:15.523","y":8},{"x":"2019-10-12T15:13:15.425","y":8},{"x":"2019-10-12T15:14:17.474","y":10},{"x":"2019-10-12T15:15:15.432","y":10},{"x":"2019-10-12T15:16:15.472","y":10},{"x":"2019-10-12T15:17:15.465","y":10},{"x":"2019-10-12T15:18:15.442","y":10},{"x":"2019-10-12T15:19:15.717","y":10},{"x":"2019-10-12T15:20:16.853","y":10},{"x":"2019-10-12T15:21:15.621","y":10},{"x":"2019-10-12T15:22:15.492","y":10},{"x":"2019-10-12T15:23:15.466","y":10},{"x":"2019-10-12T15:23:31.992","y":10},{"x":"2019-10-12T15:24:48.041","y":10},{"x":"2019-10-12T15:25:31.307","y":10},{"x":"2019-10-12T15:26:38.23","y":10},{"x":"2019-10-12T15:27:37.288","y":10},{"x":"2019-10-12T15:28:34.213","y":10},{"x":"2019-10-12T15:29:30.482","y":10},{"x":"2019-10-12T15:36:03.501","y":10},{"x":"2019-10-12T15:37:02.967","y":10},{"x":"2019-10-12T15:38:02.842","y":10},{"x":"2019-10-12T15:39:02.88","y":10},{"x":"2019-10-12T15:39:13.086","y":10},{"x":"2019-10-12T15:40:12.471","y":10},{"x":"2019-10-12T15:41:12.434","y":10},{"x":"2019-10-12T15:42:12.507","y":10},{"x":"2019-10-12T15:43:12.468","y":10},{"x":"2019-10-12T15:44:12.528","y":10},{"x":"2019-10-12T15:45:14.664","y":9},{"x":"2019-10-12T15:46:12.514","y":9},{"x":"2019-10-12T15:47:13.585","y":9},{"x":"2019-10-12T15:48:12.487","y":9},{"x":"2019-10-12T15:49:12.47","y":9},{"x":"2019-10-12T15:50:12.574","y":9},{"x":"2019-10-12T15:51:12.449","y":9},{"x":"2019-10-12T15:52:12.486","y":9},{"x":"2019-10-12T15:53:12.459","y":9},{"x":"2019-10-12T15:54:12.455","y":9},{"x":"2019-10-12T15:55:12.527","y":9},{"x":"2019-10-12T15:56:12.631","y":9},{"x":"2019-10-12T15:57:16.058","y":9},{"x":"2019-10-12T15:58:12.505","y":9},{"x":"2019-10-12T15:59:12.597","y":9},{"x":"2019-10-12T16:00:12.551","y":9},{"x":"2019-10-12T16:01:12.478","y":9},{"x":"2019-10-12T16:02:12.477","y":9},{"x":"2019-10-12T16:03:12.617","y":9},{"x":"2019-10-12T16:04:12.505","y":9},{"x":"2019-10-12T16:05:12.534","y":9},{"x":"2019-10-12T16:06:12.522","y":9},{"x":"2019-10-12T16:07:12.418","y":9},{"x":"2019-10-12T16:08:12.537","y":9},{"x":"2019-10-12T16:09:12.548","y":9},{"x":"2019-10-12T16:10:12.668","y":9},{"x":"2019-10-12T16:11:12.417","y":9},{"x":"2019-10-12T16:12:12.447","y":9},{"x":"2019-10-12T16:13:12.478","y":9},{"x":"2019-10-12T16:14:12.473","y":9},{"x":"2019-10-12T16:15:12.481","y":9},{"x":"2019-10-12T16:16:14.856","y":10},{"x":"2019-10-12T16:17:13.303","y":10},{"x":"2019-10-12T16:18:12.527","y":10}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/9653/free-bikes" method="GET" resourcePath="/station/9653/free-bikes" id="058dad66-7043-446c-82cb-355c018e1527"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b3bd76b9-5b3c-4bbb-bba9-7a8b5469e00e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"id":24961,"availableFromMinutes":43},{"id":27805,"availableFromMinutes":2},{"id":27514,"availableFromMinutes":43},{"id":27469,"availableFromMinutes":43},{"id":26730,"availableFromMinutes":43},{"id":26130,"availableFromMinutes":33},{"id":25502,"availableFromMinutes":43},{"id":25293,"availableFromMinutes":43},{"id":25125,"availableFromMinutes":43},{"id":25071,"availableFromMinutes":43},{"id":29639,"availableFromMinutes":43},{"id":28861,"availableFromMinutes":33},{"id":28983,"availableFromMinutes":43},{"id":96413,"availableFromMinutes":43},{"id":96354,"availableFromMinutes":3},{"id":96773,"availableFromMinutes":43},{"id":96728,"availableFromMinutes":43},{"id":96891,"availableFromMinutes":43},{"id":97505,"availableFromMinutes":43},{"id":97582,"availableFromMinutes":34},{"id":97904,"availableFromMinutes":2},{"id":29663,"availableFromMinutes":3}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/9482/free-bikes" method="GET" resourcePath="/station/9482/free-bikes" id="e45eedd2-39b6-477a-8929-8ac84cabc71f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="dae721aa-cb55-4b1e-badc-30b3ccf7de6b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"id":28136,"availableFromMinutes":44},{"id":27894,"availableFromMinutes":44},{"id":27872,"availableFromMinutes":44},{"id":27554,"availableFromMinutes":44},{"id":27517,"availableFromMinutes":44},{"id":27245,"availableFromMinutes":44},{"id":26836,"availableFromMinutes":44},{"id":26798,"availableFromMinutes":44},{"id":26557,"availableFromMinutes":44},{"id":26485,"availableFromMinutes":34},{"id":26096,"availableFromMinutes":34},{"id":25430,"availableFromMinutes":44},{"id":25085,"availableFromMinutes":44},{"id":25038,"availableFromMinutes":44},{"id":96553,"availableFromMinutes":44},{"id":96475,"availableFromMinutes":35},{"id":96399,"availableFromMinutes":44},{"id":96294,"availableFromMinutes":44},{"id":29176,"availableFromMinutes":44},{"id":96842,"availableFromMinutes":44},{"id":97486,"availableFromMinutes":34},{"id":97292,"availableFromMinutes":4},{"id":29559,"availableFromMinutes":44},{"id":75169,"availableFromMinutes":44}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/6445/free-bikes" method="GET" resourcePath="/station/6445/free-bikes" id="070787ee-acda-4329-a47a-2010f4722d7b"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b31b7d28-fba2-479f-a2d9-d0204c0fdf05" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"id":24453,"availableFromMinutes":44},{"id":28458,"availableFromMinutes":44},{"id":28362,"availableFromMinutes":44},{"id":27794,"availableFromMinutes":44},{"id":27664,"availableFromMinutes":44},{"id":27597,"availableFromMinutes":44},{"id":27396,"availableFromMinutes":44},{"id":26302,"availableFromMinutes":44},{"id":25807,"availableFromMinutes":44},{"id":25215,"availableFromMinutes":44},{"id":29725,"availableFromMinutes":44},{"id":29723,"availableFromMinutes":44},{"id":96533,"availableFromMinutes":44},{"id":96390,"availableFromMinutes":44},{"id":96900,"availableFromMinutes":44},{"id":97284,"availableFromMinutes":44},{"id":97685,"availableFromMinutes":44},{"id":75037,"availableFromMinutes":44},{"id":75120,"availableFromMinutes":44}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/station/9678/free-bikes" method="GET" resourcePath="/station/9678/free-bikes" id="ccdd0867-a3a4-4e01-bb5b-63e86631e488"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6345cafd-b00b-4652-b3b1-9a5794f9da47" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"id":24951,"availableFromMinutes":45},{"id":27888,"availableFromMinutes":6},{"id":26963,"availableFromMinutes":45},{"id":26670,"availableFromMinutes":6},{"id":26666,"availableFromMinutes":45},{"id":26219,"availableFromMinutes":45},{"id":25915,"availableFromMinutes":45},{"id":28870,"availableFromMinutes":45},{"id":97300,"availableFromMinutes":45},{"id":97830,"availableFromMinutes":45}]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/bike/*/points" method="GET" resourcePath="/bike/" id="88bc6464-e6b3-486b-8bb7-256424b3a5d5"><con:settings/><con:defaultResponse>96900</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="96900" id="1c61ec8e-4005-47de-9ad5-8c6c27fc1620" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"lat":52.24723,"lng":21.063056,"stationName":"PRAGA306","label":"Na stacji od 2019-10-12T15:36:03.501 do 2019-10-13T09:44:39.896"}]
</con:responseContent></con:response><con:response name="25293" id="f3549452-bed9-4a62-885a-4e1ffba2599a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"lat":52.2591682,"lng":21.0262224,"stationName":"Jagiellońska - Plac Hallera","label":"Na stacji od 2019-10-12T15:36:03.501 do 2019-10-13T09:44:39.896"}]
</con:responseContent></con:response><con:response name="24961" id="31c1e396-b5d9-4abd-973a-246d70f5ab0f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"lat":52.2591682,"lng":21.0262224,"stationName":"Jagiellońska - Plac Hallera","label":"Na stacji od 2019-10-12T15:36:03.501 do 2019-10-13T09:42:39.870"}]
</con:responseContent></con:response><con:response name="97248" id="40598178-6caf-4ccd-86a5-a157b1268760" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"lat":52.2583512,"lng":21.0585337,"stationName":"Pętla Kawęczyńska-Bazylika","label":"Na stacji od 2019-10-12T15:36:03.501 do 2019-10-12T16:46:11.742"},{"lat":52.2591682,"lng":21.0262224,"stationName":"Jagiellońska - Plac Hallera","label":"Na stacji od 2019-10-12T16:47:13.603 do 2019-10-13T09:41:39.854"}]
</con:responseContent></con:response><con:response name="96505" id="d4b13568-8718-430d-b959-f46a3162af3a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[{"lat":52.27260212316137,"lng":21.063210368156433,"stationName":"Radzymińska -Trocka","label":"Na stacji od 2019-10-12T15:36:03.501 do 2019-10-12T17:16:18.215"},{"lat":52.2524758,"lng":21.0303479,"stationName":"Floriańska - Park Praski","label":"Na stacji od 2019-10-12T17:48:20.576 do 2019-10-12T19:49:18.154"},{"lat":52.2591682,"lng":21.0262224,"stationName":"Jagiellońska - Plac Hallera","label":"Na stacji od 2019-10-12T19:50:20.305 do 2019-10-13T09:35:40.982"}]
</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>